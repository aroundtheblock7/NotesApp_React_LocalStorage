{"ast":null,"code":"var _jsxFileName = \"/Users/josephdeangeloi/Documents/Github/NotesApp_React_LocalStorage/src/App.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport Sidebar from \"./components/Sidebar\";\nimport Editor from \"./components/Editor\";\nimport { data } from \"./data\";\nimport Split from \"react-split\";\nimport { nanoid } from \"nanoid\";\nimport ReactMde from \"react-mde\";\nimport 'react-mde/lib/styles/css/react-mde-all.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  //Todo List\n  //1.) Need state to hold all the notes (array of notes), set default with localStorage 'get'\n  //2.) Nneed state to hold the note that is being selected 'currentNoteId'. This will display...\n  //... the selectd note or an emptystring (conditional must be used)\n  //3.) Need useEffect to run localStorage ('set') and re-renders contigent upon adding notes state\n  //4.) Need functions to createNewNote, updateNote(text), findCurrentNote\n  //5.) Think about the props (functions) that need to be passed to SideBar and Editor \n\n  const [notes, setNotes] = React.useState(() => JSON.parse(localStorage.getItem(\"notes\")) || []);\n\n  //notes[0] means the array has to have a note in the array or this will not display/render\n  const [currentNoteId, setCurrentNoteId] = React.useState(notes[0] && notes[0].id || \"\");\n\n  //the function we want to run is localStorage.setItem, contigent upon dependancy array [notes] \n  React.useEffect(() => {\n    localStorage.setItem(\"notes\", JSON.stringify(notes));\n  }, [notes]);\n\n  //create the note object with the 2 properties it needs then update the state notes array (setNotes)\n  //Also need to set state currentNoteId (setCurrentNoteId) and we can pass in the newNote.id property \n  function createNewNote() {\n    const newNote = {\n      id: nanoid(),\n      body: \"# Type your markdown note's title here\"\n    };\n    setNotes(prevNotes => [newNote, ...prevNotes]);\n    setCurrentNoteId(newNote.id);\n  }\n\n  //Need to updates notes array so call setNotes and pass in current array of notes (oldNotes)\n  //then map over the oldNotes and if oldNote.id === currentNoteId update that note by spreading\n  //... in properties and updating the body property with \"text\" being passed in the function\n  //... or leave the note alone (Can return and use a terinary all in one line)\n  // function updateNote(text) {\n  //     setNotes(oldNotes => oldNotes.map(oldNote => {\n  //         return oldNote.id === currentNoteId ? { ...oldNote, body: text } : oldNote\n  //     }))\n  // }\n\n  //Notice updateNote above is commented out. We can't use .map if we want to re-order\n  //...notes to the top of the array. There may be a way to use .map but we'll use\n  //... a for loop here instead.\n  function updateNote(text) {\n    setNotes(oldNotes => {\n      //create a new empty array\n      const newArray = [];\n      //Loop over the original array\n      for (let i = 0; i < oldNotes.length; i++) {\n        //if the id matches put the currentNoteId beginning of the new array (unshift)\n        const oldNote = oldNotes[i];\n        if (oldNote.id === currentNoteId) {\n          newArray.unshift({\n            ...oldNote,\n            body: text\n          });\n          //else push the old note to the end of the new array\n        } else {\n          newArray.push(oldNote);\n        }\n      }\n      //return the new array\n      return newArray;\n    });\n  }\n  function deleteNote(event, noteId) {\n    event.stopPropagation();\n    //FKT- \"Filter Keeps True\"\n    setNotes(oldNotes => oldNotes.filter(note => note.id !== noteId));\n  }\n\n  //Can use .find on notes array... find() returns the first element in the provided array that satisfies \n  //the provided testing function. If no values satisfy the testing function, undefined is returned.\n  function findCurrentNote() {\n    return notes.find(note => {\n      return note.id === currentNoteId;\n    }) || notes[0];\n  }\n\n  //Sidebar needs the notes state we created and needs setCurrentNoteId state (not currentNoteId)\n  //...because it will need to toggle between 'notes' the user selects.\n  //Sidebar needs the prop currentNote and we can pass it down by calling findCurrentNote() right away\n  //Sidebar will be creating the newNotes so we can pass teh createNewNote function as a prop\n  //Editor needs the ability to update a note so we pass it the updateNote function via a prop\n  //Editor also needs the 'currentNote' we can pass down by calling findCurrentNote right away \n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: notes.length > 0 ? /*#__PURE__*/_jsxDEV(Split, {\n      sizes: [30, 70],\n      direction: \"horizontal\",\n      className: \"split\",\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n        notes: notes,\n        currentNote: findCurrentNote(),\n        setCurrentNoteId: setCurrentNoteId,\n        newNote: createNewNote,\n        deleteNote: deleteNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), currentNoteId && notes.length > 0 && /*#__PURE__*/_jsxDEV(Editor, {\n        currentNote: findCurrentNote(),\n        updateNote: updateNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-notes\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"You have no notes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"first-note\",\n        onClick: createNewNote,\n        children: \"Create one now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"2sbVJV5hVswjeaIKC2pZEb0Eet8=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Sidebar","Editor","data","Split","nanoid","ReactMde","jsxDEV","_jsxDEV","App","_s","notes","setNotes","useState","JSON","parse","localStorage","getItem","currentNoteId","setCurrentNoteId","id","useEffect","setItem","stringify","createNewNote","newNote","body","prevNotes","updateNote","text","oldNotes","newArray","i","length","oldNote","unshift","push","deleteNote","event","noteId","stopPropagation","filter","note","findCurrentNote","find","children","sizes","direction","className","currentNote","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/josephdeangeloi/Documents/Github/NotesApp_React_LocalStorage/src/App.js"],"sourcesContent":["import React from \"react\"\nimport Sidebar from \"./components/Sidebar\"\nimport Editor from \"./components/Editor\"\nimport { data } from \"./data\"\nimport Split from \"react-split\"\nimport {nanoid} from \"nanoid\"\nimport ReactMde from \"react-mde\";\nimport 'react-mde/lib/styles/css/react-mde-all.css';\n\nexport default function App() {\n   //Todo List\n   //1.) Need state to hold all the notes (array of notes), set default with localStorage 'get'\n   //2.) Nneed state to hold the note that is being selected 'currentNoteId'. This will display...\n   //... the selectd note or an emptystring (conditional must be used)\n   //3.) Need useEffect to run localStorage ('set') and re-renders contigent upon adding notes state\n   //4.) Need functions to createNewNote, updateNote(text), findCurrentNote\n   //5.) Think about the props (functions) that need to be passed to SideBar and Editor \n\n   const [notes, setNotes] = React.useState(\n        ()=> JSON.parse(localStorage.getItem(\"notes\")) || []\n     )\n\n    //notes[0] means the array has to have a note in the array or this will not display/render\n    const [currentNoteId, setCurrentNoteId] = React.useState(\n        (notes[0] && notes[0].id || \"\")\n    )\n\n    //the function we want to run is localStorage.setItem, contigent upon dependancy array [notes] \n    React.useEffect(() => {\n        localStorage.setItem(\"notes\", JSON.stringify(notes))\n    }, [notes])\n    \n    //create the note object with the 2 properties it needs then update the state notes array (setNotes)\n    //Also need to set state currentNoteId (setCurrentNoteId) and we can pass in the newNote.id property \n    function createNewNote() {\n        const newNote = {\n            id: nanoid(),\n            body: \"# Type your markdown note's title here\"\n        }\n        setNotes(prevNotes => [newNote, ...prevNotes])\n        setCurrentNoteId(newNote.id)\n    }\n\n    //Need to updates notes array so call setNotes and pass in current array of notes (oldNotes)\n    //then map over the oldNotes and if oldNote.id === currentNoteId update that note by spreading\n    //... in properties and updating the body property with \"text\" being passed in the function\n    //... or leave the note alone (Can return and use a terinary all in one line)\n    // function updateNote(text) {\n    //     setNotes(oldNotes => oldNotes.map(oldNote => {\n    //         return oldNote.id === currentNoteId ? { ...oldNote, body: text } : oldNote\n    //     }))\n    // }\n\n    //Notice updateNote above is commented out. We can't use .map if we want to re-order\n    //...notes to the top of the array. There may be a way to use .map but we'll use\n    //... a for loop here instead.\n     function updateNote(text) {\n        setNotes(oldNotes => {\n            //create a new empty array\n            const newArray = []\n            //Loop over the original array\n            for (let i=0; i<oldNotes.length; i++) {\n                //if the id matches put the currentNoteId beginning of the new array (unshift)\n                const oldNote = oldNotes[i];\n                if (oldNote.id ===  currentNoteId) {\n                    newArray.unshift({ ...oldNote, body: text})\n                //else push the old note to the end of the new array\n                } else {\n                    newArray.push(oldNote)\n                }\n            }\n            //return the new array\n            return newArray;\n        })\n     }\n\n     function deleteNote(event, noteId) {\n        event.stopPropagation()\n        //FKT- \"Filter Keeps True\"\n        setNotes(oldNotes => oldNotes.filter(note => note.id !== noteId))\n     }\n\n\n\n    //Can use .find on notes array... find() returns the first element in the provided array that satisfies \n    //the provided testing function. If no values satisfy the testing function, undefined is returned.\n    function findCurrentNote() {\n        return notes.find(note => {\n            return note.id === currentNoteId\n        }) || notes[0]\n    }\n    \n    //Sidebar needs the notes state we created and needs setCurrentNoteId state (not currentNoteId)\n    //...because it will need to toggle between 'notes' the user selects.\n    //Sidebar needs the prop currentNote and we can pass it down by calling findCurrentNote() right away\n    //Sidebar will be creating the newNotes so we can pass teh createNewNote function as a prop\n    //Editor needs the ability to update a note so we pass it the updateNote function via a prop\n    //Editor also needs the 'currentNote' we can pass down by calling findCurrentNote right away \n    return (\n        <main>\n        {\n            notes.length > 0 \n            ?\n            <Split \n                sizes={[30, 70]} \n                direction=\"horizontal\" \n                className=\"split\"\n            >\n                <Sidebar\n                    notes={notes}\n                    currentNote={findCurrentNote()}\n                    setCurrentNoteId={setCurrentNoteId}\n                    newNote={createNewNote}\n                    deleteNote={deleteNote}\n                />\n                {\n                    currentNoteId && \n                    notes.length > 0 &&\n                    <Editor \n                        currentNote={findCurrentNote()} \n                        updateNote={updateNote} \n                    />\n                }\n            </Split>\n            :\n            <div className=\"no-notes\">\n                <h1>You have no notes</h1>\n                <button \n                    className=\"first-note\" \n                    onClick={createNewNote}\n                >\n                    Create one now\n                </button>\n            </div>\n        }\n        </main>\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}